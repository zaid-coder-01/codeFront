{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * @fileOverview Wrapper component to make charts adapt to the size of parent * DOM\n */\nimport classNames from 'classnames';\nimport React, { forwardRef, cloneElement, useState, useImperativeHandle, useRef, useEffect, useCallback, useMemo } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { isPercent } from '../util/DataUtils';\nimport { warn } from '../util/LogUtils';\nexport var ResponsiveContainer = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var aspect = _ref.aspect,\n    _ref$width = _ref.width,\n    width = _ref$width === void 0 ? '100%' : _ref$width,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? '100%' : _ref$height,\n    _ref$minWidth = _ref.minWidth,\n    minWidth = _ref$minWidth === void 0 ? 0 : _ref$minWidth,\n    minHeight = _ref.minHeight,\n    maxHeight = _ref.maxHeight,\n    children = _ref.children,\n    _ref$debounce = _ref.debounce,\n    debounce = _ref$debounce === void 0 ? 0 : _ref$debounce,\n    id = _ref.id,\n    className = _ref.className,\n    onResize = _ref.onResize;\n  var _useState = useState({\n      containerWidth: -1,\n      containerHeight: -1\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    sizes = _useState2[0],\n    setSizes = _useState2[1];\n  var containerRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return containerRef;\n  }, [containerRef]);\n  var getContainerSize = useCallback(function () {\n    if (!containerRef.current) {\n      return null;\n    }\n    return {\n      containerWidth: containerRef.current.clientWidth,\n      containerHeight: containerRef.current.clientHeight\n    };\n  }, []);\n  var updateDimensionsImmediate = useCallback(function () {\n    var newSize = getContainerSize();\n    if (newSize) {\n      var containerWidth = newSize.containerWidth,\n        containerHeight = newSize.containerHeight;\n      if (onResize) onResize(containerWidth, containerHeight);\n      setSizes(function (currentSizes) {\n        var oldWidth = currentSizes.containerWidth,\n          oldHeight = currentSizes.containerHeight;\n        if (containerWidth !== oldWidth || containerHeight !== oldHeight) {\n          return {\n            containerWidth: containerWidth,\n            containerHeight: containerHeight\n          };\n        }\n        return currentSizes;\n      });\n    }\n  }, [getContainerSize]);\n  var chartContent = useMemo(function () {\n    var containerWidth = sizes.containerWidth,\n      containerHeight = sizes.containerHeight;\n    if (containerWidth < 0 || containerHeight < 0) {\n      return null;\n    }\n    warn(isPercent(width) || isPercent(height), \"The width(%s) and height(%s) are both fixed numbers,\\n       maybe you don't need to use a ResponsiveContainer.\", width, height);\n    warn(!aspect || aspect > 0, 'The aspect(%s) must be greater than zero.', aspect);\n    var calculatedWidth = isPercent(width) ? containerWidth : width;\n    var calculatedHeight = isPercent(height) ? containerHeight : height;\n    if (aspect && aspect > 0) {\n      // Preserve the desired aspect ratio\n      if (calculatedWidth) {\n        // Will default to using width for aspect ratio\n        calculatedHeight = calculatedWidth / aspect;\n      } else if (calculatedHeight) {\n        // But we should also take height into consideration\n        calculatedWidth = calculatedHeight * aspect;\n      }\n\n      // if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight\n      if (maxHeight && calculatedHeight > maxHeight) {\n        calculatedHeight = maxHeight;\n      }\n    }\n    warn(calculatedWidth > 0 || calculatedHeight > 0, \"The width(%s) and height(%s) of chart should be greater than 0,\\n       please check the style of container, or the props width(%s) and height(%s),\\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\\n       height and width.\", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);\n    return /*#__PURE__*/cloneElement(children, {\n      width: calculatedWidth,\n      height: calculatedHeight\n    });\n  }, [aspect, children, height, maxHeight, minHeight, minWidth, sizes, width]);\n  useEffect(function () {\n    var size = getContainerSize();\n    if (size) {\n      setSizes(size);\n    }\n  }, [getContainerSize]);\n  var style = {\n    width: width,\n    height: height,\n    minWidth: minWidth,\n    minHeight: minHeight,\n    maxHeight: maxHeight\n  };\n  return /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    handleWidth: true,\n    handleHeight: true,\n    onResize: updateDimensionsImmediate,\n    targetRef: containerRef,\n    refreshMode: debounce > 0 ? 'debounce' : undefined,\n    refreshRate: debounce\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({}, id != null ? {\n    id: \"\".concat(id)\n  } : {}, {\n    className: classNames('recharts-responsive-container', className),\n    style: style,\n    ref: containerRef\n  }), chartContent));\n});","map":null,"metadata":{},"sourceType":"module"}