{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/zaidshah/CodeSolution/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = diverging;\nexports.divergingLog = divergingLog;\nexports.divergingPow = divergingPow;\nexports.divergingSqrt = divergingSqrt;\nexports.divergingSymlog = divergingSymlog;\nvar _index = require(\"../../../lib-vendor/d3-interpolate/src/index.js\");\nvar _continuous = require(\"./continuous.js\");\nvar _init = require(\"./init.js\");\nvar _linear = require(\"./linear.js\");\nvar _log = require(\"./log.js\");\nvar _sequential = require(\"./sequential.js\");\nvar _symlog = require(\"./symlog.js\");\nvar _pow = require(\"./pow.js\");\nfunction transformer() {\n  var x0 = 0,\n    x1 = 0.5,\n    x2 = 1,\n    s = 1,\n    t0,\n    t1,\n    t2,\n    k10,\n    k21,\n    interpolator = _continuous.identity,\n    transform,\n    clamp = false,\n    unknown;\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n  scale.domain = function (_) {\n    var _ref, _ref2;\n    return arguments.length ? ((_ref = _, _ref2 = _slicedToArray(_ref, 3), x0 = _ref2[0], x1 = _ref2[1], x2 = _ref2[2], _ref), t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n  };\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n  function range(interpolate) {\n    return function (_) {\n      var _ref3, _ref4;\n      var r0, r1, r2;\n      return arguments.length ? ((_ref3 = _, _ref4 = _slicedToArray(_ref3, 3), r0 = _ref4[0], r1 = _ref4[1], r2 = _ref4[2], _ref3), interpolator = (0, _index.piecewise)(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n    };\n  }\n  scale.range = range(_index.interpolate);\n  scale.rangeRound = range(_index.interpolateRound);\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  return function (t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n    return scale;\n  };\n}\nfunction diverging() {\n  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));\n  scale.copy = function () {\n    return (0, _sequential.copy)(scale, diverging());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction divergingLog() {\n  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);\n  scale.copy = function () {\n    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction divergingSymlog() {\n  var scale = (0, _symlog.symlogish)(transformer());\n  scale.copy = function () {\n    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction divergingPow() {\n  var scale = (0, _pow.powish)(transformer());\n  scale.copy = function () {\n    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}\nfunction divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}","map":null,"metadata":{},"sourceType":"script"}